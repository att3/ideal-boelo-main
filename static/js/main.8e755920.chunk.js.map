{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddNewUserSchema","Yup","shape","name","min","max","required","matches","email","phone","App","props","React","useState","currentlySortedRow","setCurrentlySortedRow","sortedByAsc","setSortedByAsc","users","setUsers","editUserId","setEditUserId","sortBy","columnName","sortedUsers","sort","a","b","localeCompare","useEffect","fetch","then","r","json","response","results","map","user","index","id","first","last","className","alt","src","initialValues","validationSchema","onSubmit","console","log","errors","handleChange","style","width","onChange","type","placeholder","component","onClick","usr","u","values","colSpan","gap","size","color","window","confirm","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e755920.chunk.js","sourcesContent":["import React from 'react';\nimport { FaTrash, FaPen, FaArrowDown, FaArrowUp } from 'react-icons/fa';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { IUser } from './interfaces/IUser';\n\nconst phoneRegExp = /^[0-9]{8,11}\\w+/\nconst AddNewUserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name is too short!')\n    .max(25, 'Name is too long!')\n    .required('Name is required')\n    .matches(/^[aA-öÖ\\s]+$/, \"Only alphabets are allowed\"),\n  email: Yup.string().email('Invalid email').required(\"Email is required\"),\n  phone: Yup.string().matches(phoneRegExp, 'Phone number is not valid').required(\"Phone number is required\")\n});\n\nconst USER_API_URL = \"https://randomuser.me/api/?results=20&nat=fi\";\nfunction App(props: any) {\n  const [currentlySortedRow, setCurrentlySortedRow] = React.useState<string>(\"name\");\n  const [sortedByAsc, setSortedByAsc] = React.useState<boolean>(true);\n  const [users, setUsers] = React.useState<IUser[]>([]);\n  const [editUserId, setEditUserId] = React.useState<number>(-1);\n  React.useEffect(() => {\n    fetch(USER_API_URL).then((r) => r.json()).then(response => {\n      setUsers(response?.results?.map((user: any, index: number) => {\n        return {\n          id: index,\n          name: `${user?.name?.first} ${user?.name?.last}`,\n          email: `${user?.email}`,\n          phone: `${user?.phone}`,\n        } as IUser\n      }));\n    })\n  }, []);\n\n  const deleteUser = (id: number) => {\n    if (window.confirm(\"Are you sure you want to delete an user?\"))\n      setUsers(users.filter(user => user.id !== id));\n  }\n\n  function sortBy(columnName: string): void {\n    let sortedUsers = [...users].sort((a: any, b: any) =>\n      sortedByAsc ?\n        a[columnName].localeCompare(b[columnName]) :\n        b[columnName].localeCompare(a[columnName]));\n\n    setSortedByAsc(!sortedByAsc);\n    setCurrentlySortedRow(columnName);\n    setUsers(sortedUsers)\n  }\n\n  return (\n    <div className=\"appContainer\">\n      <div className=\"header\">\n        <div className=\"headerLogo\">\n          <img alt=\"website logo\" src=\"https://via.placeholder.com/32/ffffff/808080\"></img>\n        </div>\n        <div className=\"headerText\">lord Software</div>\n      </div>\n\n      <div className=\"mainContent\">\n        <h2 className=\"pageTitle\">List of participants</h2>\n        <div className=\"addUserContainer\">\n          <Formik\n            initialValues={{ id: 0, name: \"\", email: \"\", phone: \"\" } as IUser}\n            validationSchema={AddNewUserSchema}\n            onSubmit={(user: IUser) => {\n              console.log(\"asdasddas\")\n              setUsers([user, ...users])\n            }}\n          >\n            {({\n              errors,\n              handleChange\n            }: any) => (\n              <Form className=\"row\">\n                <div className=\"formFieldDiv\">\n                  <Field id=\"addUserNameField\" style={{ width: 160 }} className={errors.name ? \"invalidInput\" : \"\"}  onChange={handleChange} type=\"text\" name=\"name\" placeholder=\"Full name\" />\n                  <ErrorMessage name=\"name\" component=\"div\" />\n                </div>\n                <div className=\"formFieldDiv\">\n                  <Field id=\"addUserEmailField\" style={{ width: 230 }} className={errors.email ? \"invalidInput\" : \"\"} onChange={handleChange} type=\"email\" name=\"email\" placeholder=\"E-mail address\" />\n                  <ErrorMessage name=\"email\" component=\"div\" />\n                </div>\n                <div className=\"formFieldDiv\">\n                  <Field id=\"addUserPhoneField\" onChange={handleChange} className={errors.phone ? \"invalidInput\" : \"\"}  type=\"tel\" name=\"phone\" placeholder=\"Phone number\" />\n                  <ErrorMessage name=\"phone\" component=\"div\" />\n                </div>\n                <button id=\"addNewUserBtn\" type=\"submit\" className=\"basicButton\">Add new</button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n\n        <div className=\"userTableContainer\">\n          <table className=\"userTable\">\n            <thead>\n\n              <tr className=\"sortRow\">\n                <th style={{ width: 140 }} onClick={() => sortBy(\"name\")}>Name\n                  {currentlySortedRow === \"name\" && (sortedByAsc ? <FaArrowDown /> : <FaArrowUp />)}\n                </th>\n                <th style={{ width: 215 }} onClick={() => sortBy(\"email\")}>E-mail address\n                  {currentlySortedRow === \"email\" && (sortedByAsc ? <FaArrowDown /> : <FaArrowUp />)}\n                </th>\n                <th style={{ width: 180 }} onClick={() => sortBy(\"phone\")}>Phone number\n                  {currentlySortedRow === \"phone\" && (sortedByAsc ? <FaArrowDown /> : <FaArrowUp />)}\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n\n              {\n                users?.map((user, index) => {\n                  if (editUserId === user.id) {\n                    return (\n                      <tr key={index}>\n                        <Formik\n                          initialValues={user}\n                          validationSchema={AddNewUserSchema}\n                          onSubmit={(usr: IUser) => {\n                            setUsers([...users.map((u) => u.id === usr.id ? usr : u)]);\n                            setEditUserId(-1);\n                          }}\n                        >\n                          {({\n                            values,\n                            errors,\n                            handleChange\n                          }: any) => (\n                            <>\n                              <td>\n                                <Field style={{ width: 140 }} className={errors.name ? \"invalidInput editUserName\" : \"editUserName\"} onChange={handleChange} type=\"text\" name=\"name\" placeholder=\"Full name\" />\n                              </td>\n                              <td>\n                                <Field style={{ width: 235 }} className={errors.email ? \"invalidInput editUserEmail\" : \"editUserEmail\"} onChange={handleChange} type=\"email\" name=\"email\" placeholder=\"E-mail address\" />\n                              </td>\n                              <td>\n                                <Field style={{ width: 180 }}  className={errors.phone ? \"invalidInput editUserPhone\" : \"editUserPhone\"} onChange={handleChange} type=\"tel\" name=\"phone\" placeholder=\"Phone number\" />\n                              </td>\n                              <td className=\"iconTd\" colSpan={2}>\n                                <button style={{gap: 10}} onClick={() => setEditUserId(-1)} className=\"basicButton cancel\">Cancel</button>\n                                <Form>\n                                  <button type=\"submit\" className=\"basicButton save\">Save</button>\n                                </Form>\n                              </td>\n                            </>\n                          )}\n                        </Formik>\n                      </tr>\n                    )\n                  };\n\n                  return (\n                    <tr key={index}>\n                      <td>{user.name}</td>\n                      <td>{user.email}</td>\n                      <td>{user.phone}</td>\n                      <td className=\"iconTd\" colSpan={2}>\n                        <FaPen className=\"editIcon\" onClick={() => setEditUserId(user.id)} size=\"18\" color=\"#909090\" />\n                        <FaTrash id=\"deleteIcon\" onClick={() => deleteUser(user.id)} size=\"18\" color=\"#909090\" />\n                      </td>\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </table>\n        </div>\n\n\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\"\nimport \"@fontsource/merriweather\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}